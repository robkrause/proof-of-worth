---
import { Icon } from "astro-icon/components";
import ColorSelector from "./header/ColorSelector.astro";
import Logo from "./Logo.astro";
import config from "@util/themeConfig";

// Helper function to check if a route is active
const isActive = (path: string, currentPath: string | undefined) => {
  if (!currentPath) return false;
  return currentPath.split('/')[1] === path.split('/')[1] || currentPath === path;
};

// Get the current path safely
const currentPath = new URL(Astro.request.url).pathname;
---

<nav
  class="w-full z-20 start-0"
>
  <div
    class="max-w-6xl flex flex-wrap items-center justify-between mx-auto p-4"
  >
    <div class="flex items-center gap-x-12">
      <Logo />
      <div
        class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1"
        id="navbar-sticky"
      >
        <ul
          class="flex flex-col p-4 md:p-0 mt-4 font-medium border border-gray-100 rounded-lg md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 dark:border-gray-700"
        >
          {
            config.header.navbar.links.map((nav) => (
              <li>
                <a
                  href={nav.href}
                  target={nav.target || "_self"}
                  class="font-medium inline-flex py-2 px-3 text-gray-700 dark:text-gray-200 bg-primary-700 rounded md:bg-transparent md:p-0 md:dark:text-gray-300"
                  aria-current="page"
                >
                  {nav.name}
                  {nav.target === '_blank' ? <Icon class="text-gray-500" name="tabler:arrow-up-right" /> : <></>}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <div
      class="flex gap-3 items-center md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse"
    >
    { config.header.actionButton.href &&
      <a
        href={config.header.actionButton.href}
        class="hidden md:inline-flex items-center dark:text-gray-300 text-gray-600"
      >
        {config.header.actionButton.text}
      </a>
      }
      <ColorSelector transition:persist class="hidden md:flex" />
      <button
        id="mobile-menu-button"
        type="button"
        class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
        aria-controls="navbar-sticky"
        aria-expanded="false"
      >
        <span class="sr-only">Open main menu</span>
        <svg
          class="w-5 h-5"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 17 14"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M1 1h15M1 7h15M1 13h15"></path>
        </svg>
      </button>
      <div id="mobile-menu" class="sm:hidden hidden">
        <div class="space-y-1 pb-4 pt-2">
          {
            config.header.navbar.links.map((item) => (
              <a
                href={item.href}
                class={`block border-l-4 py-2 pl-3 pr-4 text-base font-medium ${
                  isActive(item.href, currentPath)
                    ? 'bg-primary-50 border-primary-500 text-primary-700'
                    : 'border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700'
                }`}
              >
                {item.name}
                {item.target === '_blank' && <Icon name="tabler:external-link" />}
              </a>
            ))
          }
        </div>
    </div>
  </div>
</nav>


<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileMenuIcon = document.getElementById('mobile-menu-icon');

  if (mobileMenuButton && mobileMenu && mobileMenuIcon) {
    mobileMenuButton.addEventListener('click', () => {
      const isOpen = mobileMenu.classList.toggle('hidden');
      mobileMenuIcon.setAttribute('name', isOpen ? 'tabler:baseline-density-medium' : 'tabler:x');
    });
  }
</script>